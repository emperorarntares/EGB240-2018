
EGB240DVR_Skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000075e  000007f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000075e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800116  00800116  00000808  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c6  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7d  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f10  00000000  00000000  00002dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000877  00000000  00000000  00003f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014c4  00000000  00000000  000047db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_10>
  2c:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_11>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  7c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  80:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  84:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  8c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  90:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  94:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  98:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  9c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	59 01       	movw	r10, r18
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 16       	cp	r0, r16
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	12 01       	movw	r2, r4
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 fc       	sbrc	r0, 4
  c6:	00 14       	cp	r0, r0
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e4 00       	.word	0x00e4	; ????
  ce:	16 03       	mulsu	r17, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 0c       	add	r0, r0

000000d6 <string3>:
  d6:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000000e4 <string2>:
  e4:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
  f4:	69 00 61 00 6c 00 00 00                             i.a.l...

000000fc <string1>:
  fc:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 10c:	6d 00 65 00 00 00                                   m.e...

00000112 <string0>:
 112:	04 03 09 04                                         ....

00000116 <config1_descriptor>:
 116:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 126:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 136:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 146:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 156:	40 00 00                                            @..

00000159 <device_descriptor>:
 159:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 169:	03 01                                               ..

0000016b <endpoint_config_table>:
 16b:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000176 <__ctors_end>:
 176:	11 24       	eor	r1, r1
 178:	1f be       	out	0x3f, r1	; 63
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	da e0       	ldi	r29, 0x0A	; 10
 17e:	de bf       	out	0x3e, r29	; 62
 180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
 182:	11 e0       	ldi	r17, 0x01	; 1
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	ee e5       	ldi	r30, 0x5E	; 94
 18a:	f7 e0       	ldi	r31, 0x07	; 7
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
 18e:	05 90       	lpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a6 31       	cpi	r26, 0x16	; 22
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a6 e1       	ldi	r26, 0x16	; 22
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a0 32       	cpi	r26, 0x20	; 32
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <main>
 1ac:	0c 94 ad 03 	jmp	0x75a	; 0x75a <_exit>

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <usb_init>:
	UEDATX = 0;
	UEDATX = signals;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 1ba:	80 ea       	ldi	r24, 0xA0	; 160
 1bc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 1c0:	82 e1       	ldi	r24, 0x12	; 18
 1c2:	89 bd       	out	0x29, r24	; 41
 1c4:	09 b4       	in	r0, 0x29	; 41
 1c6:	00 fe       	sbrs	r0, 0
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <usb_init+0x10>
 1ca:	80 e9       	ldi	r24, 0x90	; 144
 1cc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 1d0:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 1d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <usb_configuration>
 1d8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 1e2:	78 94       	sei
 1e4:	08 95       	ret

000001e6 <usb_serial_getchar>:
 1e6:	2f b7       	in	r18, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <usb_configuration>
 1ee:	81 11       	cpse	r24, r1
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <usb_serial_getchar+0x14>
 1f2:	2f bf       	out	0x3f, r18	; 63
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	9f ef       	ldi	r25, 0xFF	; 255
 1f8:	08 95       	ret
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 200:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 204:	85 fd       	sbrc	r24, 5
 206:	12 c0       	rjmp	.+36     	; 0x22c <usb_serial_getchar+0x46>
 208:	82 fd       	sbrc	r24, 2
 20a:	04 c0       	rjmp	.+8      	; 0x214 <usb_serial_getchar+0x2e>
 20c:	0b c0       	rjmp	.+22     	; 0x224 <usb_serial_getchar+0x3e>
 20e:	82 fd       	sbrc	r24, 2
 210:	04 c0       	rjmp	.+8      	; 0x21a <usb_serial_getchar+0x34>
 212:	08 c0       	rjmp	.+16     	; 0x224 <usb_serial_getchar+0x3e>
 214:	e8 ee       	ldi	r30, 0xE8	; 232
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	9b e6       	ldi	r25, 0x6B	; 107
 21a:	90 83       	st	Z, r25
 21c:	80 81       	ld	r24, Z
 21e:	85 ff       	sbrs	r24, 5
 220:	f6 cf       	rjmp	.-20     	; 0x20e <usb_serial_getchar+0x28>
 222:	04 c0       	rjmp	.+8      	; 0x22c <usb_serial_getchar+0x46>
 224:	2f bf       	out	0x3f, r18	; 63
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	08 95       	ret
 22c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 230:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 234:	95 fd       	sbrc	r25, 5
 236:	03 c0       	rjmp	.+6      	; 0x23e <usb_serial_getchar+0x58>
 238:	9b e6       	ldi	r25, 0x6B	; 107
 23a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 23e:	2f bf       	out	0x3f, r18	; 63
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret

00000244 <usb_serial_available>:
 244:	9f b7       	in	r25, 0x3f	; 63
 246:	f8 94       	cli
 248:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <usb_configuration>
 24c:	88 23       	and	r24, r24
 24e:	89 f0       	breq	.+34     	; 0x272 <usb_serial_available+0x2e>
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 256:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 25a:	81 11       	cpse	r24, r1
 25c:	0b c0       	rjmp	.+22     	; 0x274 <usb_serial_available+0x30>
 25e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 262:	22 ff       	sbrs	r18, 2
 264:	07 c0       	rjmp	.+14     	; 0x274 <usb_serial_available+0x30>
 266:	25 fd       	sbrc	r18, 5
 268:	05 c0       	rjmp	.+10     	; 0x274 <usb_serial_available+0x30>
 26a:	2b e6       	ldi	r18, 0x6B	; 107
 26c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 270:	01 c0       	rjmp	.+2      	; 0x274 <usb_serial_available+0x30>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	9f bf       	out	0x3f, r25	; 63
 276:	08 95       	ret

00000278 <usb_serial_putchar>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <usb_configuration>
 280:	99 23       	and	r25, r25
 282:	09 f4       	brne	.+2      	; 0x286 <usb_serial_putchar+0xe>
 284:	4c c0       	rjmp	.+152    	; 0x31e <usb_serial_putchar+0xa6>
 286:	9f b7       	in	r25, 0x3f	; 63
 288:	f8 94       	cli
 28a:	24 e0       	ldi	r18, 0x04	; 4
 28c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 290:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <transmit_previous_timeout>
 294:	22 23       	and	r18, r18
 296:	49 f0       	breq	.+18     	; 0x2aa <usb_serial_putchar+0x32>
 298:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 29c:	25 fd       	sbrc	r18, 5
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <usb_serial_putchar+0x2e>
 2a0:	9f bf       	out	0x3f, r25	; 63
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	41 c0       	rjmp	.+130    	; 0x328 <usb_serial_putchar+0xb0>
 2a6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <transmit_previous_timeout>
 2aa:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 2ae:	37 5e       	subi	r19, 0xE7	; 231
 2b0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2b4:	25 fd       	sbrc	r18, 5
 2b6:	24 c0       	rjmp	.+72     	; 0x300 <usb_serial_putchar+0x88>
 2b8:	9f bf       	out	0x3f, r25	; 63
 2ba:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 2be:	39 17       	cp	r19, r25
 2c0:	81 f0       	breq	.+32     	; 0x2e2 <usb_serial_putchar+0x6a>
 2c2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <usb_configuration>
 2c6:	99 23       	and	r25, r25
 2c8:	61 f1       	breq	.+88     	; 0x322 <usb_serial_putchar+0xaa>
 2ca:	a9 ee       	ldi	r26, 0xE9	; 233
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	44 e0       	ldi	r20, 0x04	; 4
 2d0:	e8 ee       	ldi	r30, 0xE8	; 232
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	c4 ee       	ldi	r28, 0xE4	; 228
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <usb_serial_putchar+0x7c>
 2da:	9f bf       	out	0x3f, r25	; 63
 2dc:	98 81       	ld	r25, Y
 2de:	39 13       	cpse	r19, r25
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <usb_serial_putchar+0x74>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <transmit_previous_timeout>
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	1e c0       	rjmp	.+60     	; 0x328 <usb_serial_putchar+0xb0>
 2ec:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <usb_configuration>
 2f0:	99 23       	and	r25, r25
 2f2:	c9 f0       	breq	.+50     	; 0x326 <usb_serial_putchar+0xae>
 2f4:	9f b7       	in	r25, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	4c 93       	st	X, r20
 2fa:	20 81       	ld	r18, Z
 2fc:	25 ff       	sbrs	r18, 5
 2fe:	ed cf       	rjmp	.-38     	; 0x2da <usb_serial_putchar+0x62>
 300:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 304:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 308:	85 fd       	sbrc	r24, 5
 30a:	03 c0       	rjmp	.+6      	; 0x312 <usb_serial_putchar+0x9a>
 30c:	8a e3       	ldi	r24, 0x3A	; 58
 30e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <transmit_flush_timer>
 318:	9f bf       	out	0x3f, r25	; 63
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	05 c0       	rjmp	.+10     	; 0x328 <usb_serial_putchar+0xb0>
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	03 c0       	rjmp	.+6      	; 0x328 <usb_serial_putchar+0xb0>
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	01 c0       	rjmp	.+2      	; 0x328 <usb_serial_putchar+0xb0>
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 340:	e1 ee       	ldi	r30, 0xE1	; 225
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
        UDINT = 0;
 346:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 348:	83 ff       	sbrs	r24, 3
 34a:	11 c0       	rjmp	.+34     	; 0x36e <__vector_10+0x40>
		UENUM = 0;
 34c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 356:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 35a:	92 e1       	ldi	r25, 0x12	; 18
 35c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 360:	98 e0       	ldi	r25, 0x08	; 8
 362:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 366:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <usb_configuration>
		cdc_line_rtsdtr = 0;
 36a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
        }
	if (intbits & (1<<SOFI)) {
 36e:	82 ff       	sbrs	r24, 2
 370:	13 c0       	rjmp	.+38     	; 0x398 <__vector_10+0x6a>
		if (usb_configuration) {
 372:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <usb_configuration>
 376:	88 23       	and	r24, r24
 378:	79 f0       	breq	.+30     	; 0x398 <__vector_10+0x6a>
			t = transmit_flush_timer;
 37a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <transmit_flush_timer>
			if (t) {
 37e:	88 23       	and	r24, r24
 380:	59 f0       	breq	.+22     	; 0x398 <__vector_10+0x6a>
				transmit_flush_timer = --t;
 382:	81 50       	subi	r24, 0x01	; 1
 384:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <transmit_flush_timer>
				if (!t) {
 388:	81 11       	cpse	r24, r1
 38a:	06 c0       	rjmp	.+12     	; 0x398 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
 392:	8a e3       	ldi	r24, 0x3A	; 58
 394:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 3d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
 3d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 3dc:	83 ff       	sbrs	r24, 3
 3de:	4f c1       	rjmp	.+670    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
                bmRequestType = UEDATX;
 3e0:	e1 ef       	ldi	r30, 0xF1	; 241
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	a0 81       	ld	r26, Z
                bRequest = UEDATX;
 3e6:	80 81       	ld	r24, Z
                wValue = UEDATX;
 3e8:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 3ea:	90 81       	ld	r25, Z
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 3f0:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 3f2:	90 81       	ld	r25, Z
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	ba 01       	movw	r22, r20
 3f8:	79 2b       	or	r23, r25
                wLength = UEDATX;
 3fa:	c0 81       	ld	r28, Z
                wLength |= (UEDATX << 8);
 3fc:	d0 81       	ld	r29, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 3fe:	92 ef       	ldi	r25, 0xF2	; 242
 400:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 404:	86 30       	cpi	r24, 0x06	; 6
 406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	59 c0       	rjmp	.+178    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 40c:	81 e2       	ldi	r24, 0x21	; 33
 40e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					return;
 412:	3c c1       	rjmp	.+632    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 414:	4c ea       	ldi	r20, 0xAC	; 172
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	06 ed       	ldi	r16, 0xD6	; 214
 41a:	10 e0       	ldi	r17, 0x00	; 0
 41c:	ca 01       	movw	r24, r20
				}
				desc_val = pgm_read_word(list);
 41e:	fa 01       	movw	r30, r20
 420:	a5 91       	lpm	r26, Z+
 422:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 424:	2a 17       	cp	r18, r26
 426:	3b 07       	cpc	r19, r27
 428:	09 f5       	brne	.+66     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 42a:	fa 01       	movw	r30, r20
 42c:	32 96       	adiw	r30, 0x02	; 2
 42e:	a5 91       	lpm	r26, Z+
 430:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 432:	6a 17       	cp	r22, r26
 434:	7b 07       	cpc	r23, r27
 436:	d1 f4       	brne	.+52     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 438:	fa 01       	movw	r30, r20
 43a:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 43c:	45 91       	lpm	r20, Z+
 43e:	54 91       	lpm	r21, Z
				list += 2;
 440:	fc 01       	movw	r30, r24
 442:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 444:	24 91       	lpm	r18, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 446:	8c 2f       	mov	r24, r28
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	9d 2b       	or	r25, r29
 44c:	8f 3f       	cpi	r24, 0xFF	; 255
 44e:	91 05       	cpc	r25, r1
 450:	19 f0       	breq	.+6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 452:	10 f0       	brcs	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	82 17       	cp	r24, r18
 45a:	08 f4       	brcc	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 45e:	a8 ee       	ldi	r26, 0xE8	; 232
 460:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 462:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 464:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 466:	c1 ef       	ldi	r28, 0xF1	; 241
 468:	d0 e0       	ldi	r29, 0x00	; 0
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 46c:	49 5f       	subi	r20, 0xF9	; 249
 46e:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 470:	40 17       	cp	r20, r16
 472:	51 07       	cpc	r21, r17
 474:	99 f6       	brne	.-90     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 476:	ca cf       	rjmp	.-108    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 478:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 47a:	98 2f       	mov	r25, r24
 47c:	95 70       	andi	r25, 0x05	; 5
 47e:	e1 f3       	breq	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				if (i & (1<<RXOUTI)) return;	// abort
 480:	82 fd       	sbrc	r24, 2
 482:	04 c1       	rjmp	.+520    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 484:	32 2f       	mov	r19, r18
 486:	21 31       	cpi	r18, 0x11	; 17
 488:	08 f0       	brcs	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 48c:	33 23       	and	r19, r19
 48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	fa c0       	rjmp	.+500    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 492:	fa 01       	movw	r30, r20
 494:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 496:	94 91       	lpm	r25, Z
 498:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 49a:	81 50       	subi	r24, 0x01	; 1
 49c:	31 96       	adiw	r30, 0x01	; 1
 49e:	81 11       	cpse	r24, r1
 4a0:	fa cf       	rjmp	.-12     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	83 0f       	add	r24, r19
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	48 0f       	add	r20, r24
 4ac:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 4ae:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4b0:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 4b2:	21 11       	cpse	r18, r1
 4b4:	e1 cf       	rjmp	.-62     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 4b6:	30 31       	cpi	r19, 0x10	; 16
 4b8:	f9 f2       	breq	.-66     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 4ba:	e8 c0       	rjmp	.+464    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 4bc:	85 30       	cpi	r24, 0x05	; 5
 4be:	61 f4       	brne	.+24     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4c0:	8e ef       	ldi	r24, 0xFE	; 254
 4c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4c6:	e8 ee       	ldi	r30, 0xE8	; 232
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	80 ff       	sbrs	r24, 0
 4ce:	fd cf       	rjmp	.-6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 4d0:	20 68       	ori	r18, 0x80	; 128
 4d2:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 4d6:	da c0       	rjmp	.+436    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 4d8:	89 30       	cpi	r24, 0x09	; 9
 4da:	09 f0       	breq	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4dc:	35 c0       	rjmp	.+106    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4de:	a1 11       	cpse	r26, r1
 4e0:	ce c0       	rjmp	.+412    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
			usb_configuration = wValue;
 4e2:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <usb_configuration>
			cdc_line_rtsdtr = 0;
 4e6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
			transmit_flush_timer = 0;
 4ea:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4ee:	8e ef       	ldi	r24, 0xFE	; 254
 4f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4f4:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 4f6:	2b e6       	ldi	r18, 0x6B	; 107
 4f8:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 4fa:	c9 ee       	ldi	r28, 0xE9	; 233
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 4fe:	ab ee       	ldi	r26, 0xEB	; 235
 500:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 502:	0c ee       	ldi	r16, 0xEC	; 236
 504:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 506:	6d ee       	ldi	r22, 0xED	; 237
 508:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 50a:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 50c:	a9 01       	movw	r20, r18
 50e:	4f 5f       	subi	r20, 0xFF	; 255
 510:	5f 4f       	sbci	r21, 0xFF	; 255
 512:	f9 01       	movw	r30, r18
 514:	94 91       	lpm	r25, Z
				UECONX = en;
 516:	9c 93       	st	X, r25
				if (en) {
 518:	99 23       	and	r25, r25
 51a:	61 f0       	breq	.+24     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
					UECFG0X = pgm_read_byte(cfg++);
 51c:	fa 01       	movw	r30, r20
 51e:	44 91       	lpm	r20, Z
 520:	f8 01       	movw	r30, r16
 522:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 524:	f9 01       	movw	r30, r18
 526:	32 96       	adiw	r30, 0x02	; 2
 528:	94 91       	lpm	r25, Z
 52a:	2d 5f       	subi	r18, 0xFD	; 253
 52c:	3f 4f       	sbci	r19, 0xFF	; 255
 52e:	fb 01       	movw	r30, r22
 530:	90 83       	st	Z, r25
 532:	01 c0       	rjmp	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 534:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	85 30       	cpi	r24, 0x05	; 5
 53a:	39 f7       	brne	.-50     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 53c:	ea ee       	ldi	r30, 0xEA	; 234
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	8e e1       	ldi	r24, 0x1E	; 30
 542:	80 83       	st	Z, r24
        		UERST = 0;
 544:	10 82       	st	Z, r1
			return;
 546:	a2 c0       	rjmp	.+324    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	81 f4       	brne	.+32     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 54c:	a0 38       	cpi	r26, 0x80	; 128
 54e:	09 f0       	breq	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 550:	96 c0       	rjmp	.+300    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 552:	e8 ee       	ldi	r30, 0xE8	; 232
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	80 ff       	sbrs	r24, 0
 55a:	fd cf       	rjmp	.-6      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 55c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <usb_configuration>
 560:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 564:	8e ef       	ldi	r24, 0xFE	; 254
 566:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 56a:	90 c0       	rjmp	.+288    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 56c:	81 32       	cpi	r24, 0x21	; 33
 56e:	b9 f4       	brne	.+46     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 570:	a1 3a       	cpi	r26, 0xA1	; 161
 572:	09 f0       	breq	.+2      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 574:	84 c0       	rjmp	.+264    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 576:	e8 ee       	ldi	r30, 0xE8	; 232
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	80 ff       	sbrs	r24, 0
 57e:	fd cf       	rjmp	.-6      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 580:	e0 e0       	ldi	r30, 0x00	; 0
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	27 e0       	ldi	r18, 0x07	; 7
 586:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 588:	a1 ef       	ldi	r26, 0xF1	; 241
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	81 91       	ld	r24, Z+
 58e:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 590:	2e 17       	cp	r18, r30
 592:	3f 07       	cpc	r19, r31
 594:	d9 f7       	brne	.-10     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 596:	8e ef       	ldi	r24, 0xFE	; 254
 598:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 59c:	77 c0       	rjmp	.+238    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 59e:	80 32       	cpi	r24, 0x20	; 32
 5a0:	d1 f4       	brne	.+52     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5a2:	a1 32       	cpi	r26, 0x21	; 33
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a6:	6b c0       	rjmp	.+214    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 5a8:	e8 ee       	ldi	r30, 0xE8	; 232
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	82 ff       	sbrs	r24, 2
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5b2:	e0 e0       	ldi	r30, 0x00	; 0
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	27 e0       	ldi	r18, 0x07	; 7
 5b8:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 5ba:	a1 ef       	ldi	r26, 0xF1	; 241
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	8c 91       	ld	r24, X
 5c0:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5c2:	2e 17       	cp	r18, r30
 5c4:	3f 07       	cpc	r19, r31
 5c6:	d9 f7       	brne	.-10     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 5c8:	e8 ee       	ldi	r30, 0xE8	; 232
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	8b ef       	ldi	r24, 0xFB	; 251
 5ce:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5d0:	8e ef       	ldi	r24, 0xFE	; 254
 5d2:	80 83       	st	Z, r24
 5d4:	5b c0       	rjmp	.+182    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 5d6:	82 32       	cpi	r24, 0x22	; 34
 5d8:	71 f4       	brne	.+28     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5da:	a1 32       	cpi	r26, 0x21	; 33
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5de:	4f c0       	rjmp	.+158    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
			cdc_line_rtsdtr = wValue;
 5e0:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5e4:	e8 ee       	ldi	r30, 0xE8	; 232
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	80 ff       	sbrs	r24, 0
 5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5ee:	8e ef       	ldi	r24, 0xFE	; 254
 5f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5f4:	4b c0       	rjmp	.+150    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 5f6:	81 11       	cpse	r24, r1
 5f8:	1a c0       	rjmp	.+52     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5fa:	e8 ee       	ldi	r30, 0xE8	; 232
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	80 ff       	sbrs	r24, 0
 602:	fd cf       	rjmp	.-6      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 604:	a2 38       	cpi	r26, 0x82	; 130
 606:	51 f4       	brne	.+20     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
				UENUM = wIndex;
 608:	e9 ee       	ldi	r30, 0xE9	; 233
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 60e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 612:	85 fb       	bst	r24, 5
 614:	88 27       	eor	r24, r24
 616:	80 f9       	bld	r24, 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 618:	10 82       	st	Z, r1
 61a:	01 c0       	rjmp	.+2      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 61c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 61e:	e1 ef       	ldi	r30, 0xF1	; 241
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 83       	st	Z, r24
			UEDATX = 0;
 624:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 626:	8e ef       	ldi	r24, 0xFE	; 254
 628:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 62c:	2f c0       	rjmp	.+94     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 62e:	98 2f       	mov	r25, r24
 630:	9d 7f       	andi	r25, 0xFD	; 253
 632:	91 30       	cpi	r25, 0x01	; 1
 634:	21 f5       	brne	.+72     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
		  && bmRequestType == 0x02 && wValue == 0) {
 636:	a2 30       	cpi	r26, 0x02	; 2
 638:	11 f5       	brne	.+68     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 63a:	23 2b       	or	r18, r19
 63c:	01 f5       	brne	.+64     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
			i = wIndex & 0x7F;
 63e:	46 2f       	mov	r20, r22
 640:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 642:	9f ef       	ldi	r25, 0xFF	; 255
 644:	94 0f       	add	r25, r20
 646:	94 30       	cpi	r25, 0x04	; 4
 648:	d0 f4       	brcc	.+52     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 64a:	9e ef       	ldi	r25, 0xFE	; 254
 64c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 650:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 654:	83 30       	cpi	r24, 0x03	; 3
 656:	21 f4       	brne	.+8      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 658:	81 e2       	ldi	r24, 0x21	; 33
 65a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 65e:	16 c0       	rjmp	.+44     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 660:	89 e1       	ldi	r24, 0x19	; 25
 662:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	4a 95       	dec	r20
 672:	e2 f7       	brpl	.-8      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 674:	ea ee       	ldi	r30, 0xEA	; 234
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 83       	st	Z, r24
					UERST = 0;
 67a:	10 82       	st	Z, r1
 67c:	07 c0       	rjmp	.+14     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 67e:	81 e2       	ldi	r24, 0x21	; 33
 680:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 684:	03 c0       	rjmp	.+6      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 686:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 688:	21 11       	cpse	r18, r1
 68a:	f6 ce       	rjmp	.-532    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <init>:
/************************************************************************/
/* Initialisation                                                       */
/************************************************************************/
void init() 
{
	cli();
 6b6:	f8 94       	cli

	// Configure system clock for 16 MHz
	CLKPR = 0x80;	// Prescaler change enable
 6b8:	e1 e6       	ldi	r30, 0x61	; 97
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	90 e8       	ldi	r25, 0x80	; 128
 6be:	90 83       	st	Z, r25
	CLKPR = 0x00;	// Prescaler /1, 16 MHz
 6c0:	10 82       	st	Z, r1

	DDRF &= 0b00001111;		// Set PORTF 7-4 as inputs (PBs)
 6c2:	80 b3       	in	r24, 0x10	; 16
 6c4:	8f 70       	andi	r24, 0x0F	; 15
 6c6:	80 bb       	out	0x10, r24	; 16
	DDRD |= 0b11110000;
 6c8:	8a b1       	in	r24, 0x0a	; 10
 6ca:	80 6f       	ori	r24, 0xF0	; 240
 6cc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b01000000;		// Set PORTB 6 (JOUT) as output (LEDs)
 6ce:	26 9a       	sbi	0x04, 6	; 4
	PORTD &= 0b00001111;	// turn LEDs off
 6d0:	8b b1       	in	r24, 0x0b	; 11
 6d2:	8f 70       	andi	r24, 0x0F	; 15
 6d4:	8b b9       	out	0x0b, r24	; 11

	// Initialise Timer4 for 8-bit PWM
	// Using OC4D, connected to LED4
	//TCCR4B = 0x0B;  //prescaler 1024, ~61Hz
	TCCR4B = 0x03;  //prescaler 1024, ~15.625Hz
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	TCCR4A = 0b00100001;   // Clear on CMP, enable PWM
 6dc:	81 e2       	ldi	r24, 0x21	; 33
 6de:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	OCR4C = TOP;    // set top to 0xFF (255)
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	OCR4B = 0x80;   // initialise to 50% duty cycle
 6e8:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	TCNT4 = 0x00;  // reset counter
 6ec:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7e00bf>
 6f0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__TEXT_REGION_LENGTH__+0x7e00be>

	serial_init();	// Initialise USB serial interface (debug)
 6f4:	0e 94 a2 03 	call	0x744	; 0x744 <serial_init>

	sei();
 6f8:	78 94       	sei
 6fa:	08 95       	ret

000006fc <main>:
/************************************************************************/
/* MAIN LOOP (CODE ENTRY)                                               */
/************************************************************************/
int main(void) 
{
	init();
 6fc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <init>
	// main program loop
    while(1)
	{
		  if (~PINF & 0b00010000)   // S1
		  {
		    OCR4B = 0x57;	        //PWM -> 34% duty cycle 87 decimal			
 700:	e0 ed       	ldi	r30, 0xD0	; 208
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	37 e5       	ldi	r19, 0x57	; 87
		  	PORTD |= 0b00010000;    // turn LED1
		  }

		  if (~PINF & 0b00100000)   // S2
		  {
		      OCR4B = 0xBB;	        //PWM -> 73% duty cycle 187 decimal
 706:	2b eb       	ldi	r18, 0xBB	; 187
		      PORTD |= 0b00100000;    // turn LED2 on
		  }

		  if (~PINF & 0b01000000)   // S3
		  {
		      OCR4B = 0xFD;	        //PWM -> 99% duty cycle 253 decimal
 708:	9d ef       	ldi	r25, 0xFD	; 253
	init();

	// main program loop
    while(1)
	{
		  if (~PINF & 0b00010000)   // S1
 70a:	7c 99       	sbic	0x0f, 4	; 15
 70c:	02 c0       	rjmp	.+4      	; 0x712 <main+0x16>
		  {
		    OCR4B = 0x57;	        //PWM -> 34% duty cycle 87 decimal			
 70e:	30 83       	st	Z, r19
		  	PORTD |= 0b00010000;    // turn LED1
 710:	5c 9a       	sbi	0x0b, 4	; 11
		  }

		  if (~PINF & 0b00100000)   // S2
 712:	7d 99       	sbic	0x0f, 5	; 15
 714:	02 c0       	rjmp	.+4      	; 0x71a <main+0x1e>
		  {
		      OCR4B = 0xBB;	        //PWM -> 73% duty cycle 187 decimal
 716:	20 83       	st	Z, r18
		      PORTD |= 0b00100000;    // turn LED2 on
 718:	5d 9a       	sbi	0x0b, 5	; 11
		  }

		  if (~PINF & 0b01000000)   // S3
 71a:	7e 99       	sbic	0x0f, 6	; 15
 71c:	02 c0       	rjmp	.+4      	; 0x722 <main+0x26>
		  {
		      OCR4B = 0xFD;	        //PWM -> 99% duty cycle 253 decimal
 71e:	90 83       	st	Z, r25
		      PORTD |= 0b01000000;    // turn LED3 on
 720:	5e 9a       	sbi	0x0b, 6	; 11
		  }

		  if (PINF & 0b01110000)    // none of push button S1-S3 pressed
 722:	8f b1       	in	r24, 0x0f	; 15
 724:	80 77       	andi	r24, 0x70	; 112
 726:	89 f3       	breq	.-30     	; 0x70a <main+0xe>
		     PORTD &= 0b10001111;    // turn LEDs 1-3 off
 728:	8b b1       	in	r24, 0x0b	; 11
 72a:	8f 78       	andi	r24, 0x8F	; 143
 72c:	8b b9       	out	0x0b, r24	; 11
 72e:	ed cf       	rjmp	.-38     	; 0x70a <main+0xe>

00000730 <serial_getchar>:
	return usb_serial_putchar(c);
}

static uint8_t serial_getchar(FILE *stream) {
	//wait for character (blocking)
	while(!usb_serial_available());
 730:	0e 94 22 01 	call	0x244	; 0x244 <usb_serial_available>
 734:	88 23       	and	r24, r24
 736:	e1 f3       	breq	.-8      	; 0x730 <serial_getchar>
	//read a character from the USB serial interface 
	return usb_serial_getchar();
 738:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <usb_serial_getchar>
}
 73c:	08 95       	ret

0000073e <serial_putchar>:
/************************************************************************/
/* PRIVATE/UTILLITY FUNCTIONS                                           */
/************************************************************************/
static uint8_t serial_putchar(char c, FILE *stream) {
	//outputs a character via the USB serial interface
	return usb_serial_putchar(c);
 73e:	0e 94 3c 01 	call	0x278	; 0x278 <usb_serial_putchar>
}
 742:	08 95       	ret

00000744 <serial_init>:
 * Initialises the serial module for use. This function must be called
 * prior to using any IO functions. This function initialises the USB
 * interface and creates the input and output serial streams.
 */
void serial_init() {
	usb_init();			  // Initialise USB serial
 744:	0e 94 da 00 	call	0x1b4	; 0x1b4 <usb_init>
	stdin = &stdinout;
 748:	ea e1       	ldi	r30, 0x1A	; 26
 74a:	f1 e0       	ldi	r31, 0x01	; 1
 74c:	87 e0       	ldi	r24, 0x07	; 7
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	91 83       	std	Z+1, r25	; 0x01
 752:	80 83       	st	Z, r24
	stdout = &stdinout;
 754:	93 83       	std	Z+3, r25	; 0x03
 756:	82 83       	std	Z+2, r24	; 0x02
 758:	08 95       	ret

0000075a <_exit>:
 75a:	f8 94       	cli

0000075c <__stop_program>:
 75c:	ff cf       	rjmp	.-2      	; 0x75c <__stop_program>
